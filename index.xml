<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cobrapy - constraint-based metabolic modeling in Python</title>
    <link>https://opencobra.github.io/cobrapy/index.xml</link>
    <description>Recent content on cobrapy - constraint-based metabolic modeling in Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 11:00:05 -0600</lastBuildDate>
    <atom:link href="https://opencobra.github.io/cobrapy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>https://opencobra.github.io/cobrapy/intro/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/intro/description/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/opencobra/cobrapy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/opencobra/cobrapy.svg?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/opencobra/cobrapy/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/opencobra/cobrapy.svg&#34; alt=&#34;GitHub contributors&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;./releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/opencobra/cobrapy.svg&#34; alt=&#34;GitHub release&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cobrapy&lt;/strong&gt; is a python package that provides a simple interface to metabolic constraint-based reconstruction and analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import cobra
&amp;gt;&amp;gt;&amp;gt; model = cobra.io.read_sbml_model(&#39;Ec_core_flux1.xml&#39;)
&amp;gt;&amp;gt;&amp;gt; model.metabolites[:3]
[&amp;lt;Metabolite 13dpg_c at 0x112b2d160&amp;gt;,
 &amp;lt;Metabolite 2pg_c at 0x1024eb048&amp;gt;,
 &amp;lt;Metabolite 3pg_c at 0x112b2d748&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package includes simple, object-oriented interfaces for model construction (including reading to/from sbml, matlab, and json formats) and implements commonly used COBRA methods such as flux balance analysis, flux variability analysis, and gene deletion analyses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; model.optimize()
&amp;lt;Solution 0.86 at 0x11272c2b0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; model.summary()
IN FLUXES       OUT FLUXES    OBJECTIVES
--------------  ------------  ----------------------
o2_e     22.3   h2o_e  24.9   Biomass_Ecol...  0.861
glc_D_e  10     co2_e  23.3
pi_e      3.17  h_e     9.11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;cobrapy&lt;/strong&gt; is a community-supported effort under active development and is licensed under
the GPL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://opencobra.github.io/cobrapy/intro/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/intro/installation/</guid>
      <description>&lt;p&gt;You can install cobrapy on linux, Mac OSX and Windows with pip.&lt;/p&gt;

&lt;p&gt;On Linux and Mac a simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install cobra
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will be enough. On Windows substitute pip with pip.exe.&lt;/p&gt;

&lt;p&gt;If you want to install all optional dependencies as well just install with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install cobra[all]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For futher help refer to the &lt;a href=&#34;https://github.com/opencobra/cobrapy/blob/devel/INSTALL.rst&#34;&gt;detailed installation instructions&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Help</title>
      <link>https://opencobra.github.io/cobrapy/intro/help/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/intro/help/</guid>
      <description>&lt;p&gt;The documentation is browsable online at
&lt;a href=&#34;https://cobrapy.readthedocs.org/en/stable/&#34;&gt;readthedocs&lt;/a&gt; and can
also be
&lt;a href=&#34;https://readthedocs.org/projects/cobrapy/downloads/&#34;&gt;downloaded&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please use the &lt;a href=&#34;http://groups.google.com/group/cobra-pie&#34;&gt;Google
Group&lt;/a&gt; for help.
Alternatively, you can use
&lt;a href=&#34;https://gitter.im/opencobra/cobrapy&#34;&gt;gitter.im&lt;/a&gt; for quick questions
and discussions about cobrapy (faster response times).&lt;/p&gt;

&lt;p&gt;File bug reports and contribute to development on our &lt;a href=&#34;https://github.com/opencobra/cobrapy&#34;&gt;github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you use cobrapy in a scientific publication, please cite
&lt;a href=&#34;http://dx.doi.org/doi:10.1186/1752-0509-7-74&#34;&gt;our publication&lt;/a&gt; ðŸ˜„&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mminte</title>
      <link>https://opencobra.github.io/cobrapy/packages/mminte/</link>
      <pubDate>Mon, 24 Apr 2017 11:00:05 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/mminte/</guid>
      <description>&lt;p&gt;MMinte (pronounced /â€˜minti/) is a set of widgets that allows you to explore the pairwise interactions (positive or negative) that occur in a microbial community. From an association network and 16S rDNA sequence data, MMinte identifies corresponding genomes, reconstructs metabolic models, estimates growth under specific metabolic conditions, analyzes pairwise interactions, assigns interaction types to network links, and generates the corresponding network of interactions. You can run the MMinte widgets as an integrated pipeline or run each widget independently.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mackinac: a bridge between ModelSEED and COBRApy to generate and analyze genome-scale metabolic models.</title>
      <link>https://opencobra.github.io/cobrapy/pubs/PM28379466/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/pubs/PM28379466/</guid>
      <description>&lt;p&gt;Reconstructing and analyzing a large number of genome-scale metabolic models is a fundamental part of the integrated study of microbial communities; however, two of the most widely used frameworks for building and analyzing models use different metabolic network representations. Here we describe Mackinac, a Python package that combines ModelSEEDâ€™s ability to automatically reconstruct metabolic models with COBRApyâ€™s advanced analysis capabilities to bridge the differences between the two frameworks and facilitate the study of the metabolic potential of microorganisms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>escher</title>
      <link>https://opencobra.github.io/cobrapy/packages/escher/</link>
      <pubDate>Mon, 27 Mar 2017 12:13:48 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/escher/</guid>
      <description>&lt;p&gt;Escher is a web-based tool for building, viewing, and sharing visualizations of
biological pathways. These &amp;lsquo;pathway maps&amp;rsquo; are a great way to contextualize data
about metabolism.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>micom</title>
      <link>https://opencobra.github.io/cobrapy/packages/micom/</link>
      <pubDate>Mon, 27 Mar 2017 11:52:51 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/micom/</guid>
      <description>&lt;p&gt;micom is a Python package for metabolic modeling of microbial communities.&lt;/p&gt;

&lt;p&gt;micom allows you to construct a community model from a list on input COBRA
models and manages exchange fluxes between individuals and individuals with the
environment. It explicitly accounts for different abundances of individuals in
the community and can thus incorporate data from 16S rRNA sequencing
experiments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>corda</title>
      <link>https://opencobra.github.io/cobrapy/packages/corda/</link>
      <pubDate>Mon, 27 Mar 2017 11:52:47 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/corda/</guid>
      <description>&lt;p&gt;CORDA, short for Cost Optimization Reaction Dependency Assessment is a method
for the reconstruction of metabolic networks from a given reference model (a
database of all known reactions) and a confidence mapping for reactions
developed by A. Schultz and A. Qutub. It allows you to quickly reconstruct
metabolic models for tissues, patients or specific experimental conditions from
a set of transcription or proteome measurements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>minspan</title>
      <link>https://opencobra.github.io/cobrapy/packages/minspan/</link>
      <pubDate>Mon, 27 Mar 2017 11:52:42 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/minspan/</guid>
      <description>&lt;p&gt;This project calculates the minimal spanning vectors of the null space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dd-decaf</title>
      <link>https://opencobra.github.io/cobrapy/packages/dd-decaf/</link>
      <pubDate>Mon, 27 Mar 2017 11:52:33 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/dd-decaf/</guid>
      <description>&lt;p&gt;Large EU-backed project bringing together leading academic partners from five
European universities with five innovative European companies to address the
challenge of building a comprehensive design tool. &lt;strong&gt;DD-DeCaF&lt;/strong&gt; aims to develop
cutting edge methods for using large scale data to design cell factories and
communities for biotechnological applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>0.6 alpha</title>
      <link>https://opencobra.github.io/cobrapy/releases/0.6_alpha/</link>
      <pubDate>Mon, 13 Mar 2017 14:28:15 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/releases/0.6_alpha/</guid>
      <description>

&lt;p&gt;In this release we have made major changes to pretty much all corners
of cobrapy and we hope that you will enjoy the new features as much as
we do, and that any negative impacts on existing workflows will be
limited.&lt;/p&gt;

&lt;p&gt;The major change is the ongoing move away from cobrapy&amp;rsquo;s internal
solver interfaces to those provided by
&lt;a href=&#34;https://github.com/biosustain/optlang&#34;&gt;optlang&lt;/a&gt; which provides a
single unified interface to glpk, cplex and gurobi enhanced by the
ability to deal with symbolic expressions. This means formulating
complex constraints no longer implies defining the necessary matrix
algebra, but instead simply writing the expression and assigning that
as an objective to the model.&lt;/p&gt;

&lt;p&gt;We feel that this, and the clarified scope and focus attained by
separating the topic of linear programming (optlang) and metabolic
flux analysis (cobrapy) to two packages is natural and makes both of
these tasks less confusing and more fun. We hope that you after
trying, feel the same and that in any case you let us know what you
think by
&lt;a href=&#34;https://github.com/opencobra/cobrapy/issues&#34;&gt;raising an issue&lt;/a&gt; or
talking directly to us on &lt;a href=&#34;gitter.im/opencobra/cobrapy&#34;&gt;gitter&lt;/a&gt; or
&lt;a href=&#34;https://groups.google.com/forum/#!forum/cobra-pie&#34;&gt;google groups&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;new-features&#34;&gt;New features&lt;/h2&gt;

&lt;h3 id=&#34;the-optlang-solver-interface&#34;&gt;The optlang solver interface&lt;/h3&gt;

&lt;p&gt;The main change is the addition of &lt;code&gt;model.solver&lt;/code&gt; which is the optlang
interface to the chosen solver (cplex and glpk are currently well
supported, gurobi interface is at the time of writing mostly working
but improvements are still expected). The solver interface manages
variables, constraints and the objective of the model and the task of
turning these into a model formulation to be optimized by the
solver. From cobrapy&amp;rsquo;s point-of-view, this means that all aspects
concerning generating problems, configuring solvers are handed over to
optlang and consequently the whole &lt;code&gt;cobra.solver&lt;/code&gt; has been deprecated,
slated for removal in the next major release of cobrapy.&lt;/p&gt;

&lt;p&gt;Importantly, configuring the solver by passing &lt;code&gt;**solver_args&lt;/code&gt; or
&lt;code&gt;solver=&#39;solver&#39;&lt;/code&gt; is now instead done by assigning solver to
&lt;code&gt;model.solver&lt;/code&gt; and then configuring via &lt;code&gt;model.solver.configuration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Creating new algorithms has been greatly facilitated as it no longer
requires formulating objectives and constraints by matrix algebra but
instead directly by expressions, e.g. see the implementation of
&lt;code&gt;cobra.flux_analysis.moma.add_moma&lt;/code&gt; and
&lt;code&gt;cobra.flux_analysis.loopless.loopless_solution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of having only reactions as variables and metabolites as
constraints, with optlang, cobrapy now supports arbitrary constraints
and variables and these can be added/removed by &lt;code&gt;model.add_cons_vars&lt;/code&gt;
and &lt;code&gt;model.remove_cons_vars&lt;/code&gt; which take care of adding these to
&lt;code&gt;model.problem&lt;/code&gt; which is the optlang&amp;rsquo;s mathematical model associated
with the cobra model.&lt;/p&gt;

&lt;p&gt;Reactions are now modeled by two variables, forward and reverse, and
these can be seen by accessing &lt;code&gt;reaction.{forward,reverse}_variable&lt;/code&gt;
and the combined &lt;code&gt;reaction.flux_expression&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Objectives can now easily be made quite advanced by simply crafting
the right expression and assigning this as usual to &lt;code&gt;model.objective&lt;/code&gt;,
see the
&lt;a href=&#34;http://cobrapy.readthedocs.io/en/latest/constraints_objectives.html&#34;&gt;contraints and objectives notebook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;temporary-changes-to-a-model&#34;&gt;Temporary changes to a model&lt;/h3&gt;

&lt;p&gt;Models are large complex objects and copying such objects is
inevitably slow. To avoid that, cobrapy has drawn on the experience
from the development of cameo to introduce the &lt;code&gt;HistoryManager&lt;/code&gt; class
and the concept of models as contexts. Now, most changes that can be
made to a model such as changing the objective, setting reaction
bounds, adding and removing reactions, is reversed upon exit when done
inside a context, see the updated
&lt;a href=&#34;http://cobrapy.readthedocs.io/en/latest/getting_started.html&#34;&gt;getting started notebook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;improved-solution-handling&#34;&gt;Improved solution handling&lt;/h3&gt;

&lt;p&gt;Previously, cobra models lugged around their latest solution to enable
providing &lt;code&gt;reaction.{flux,reduced_cost}&lt;/code&gt; (formerly
&lt;code&gt;reaction.{x,y}&lt;/code&gt;). This was problematic because if the model had
changed since last optimization, then this would effectively give the
wrong result. On top of that, it was not easy to make a change,
optimize and get values, and then undo that change to the model
without having to copy the whole model object. To solve this, and many
similar problem, we have completely refactored &lt;code&gt;cobra.Solution&lt;/code&gt; so
that &lt;code&gt;model.optimize()&lt;/code&gt; now returns a solution and it is the user&amp;rsquo;s
responsibility to manage this object. &lt;code&gt;reaction.flux&lt;/code&gt; gets its values
directly from the &lt;code&gt;model.problem&lt;/code&gt;. To sugar the new solution class,
fluxes, reduced costs, and shadow prices are now pandas series!&lt;/p&gt;

&lt;h2 id=&#34;sampling&#34;&gt;Sampling&lt;/h2&gt;

&lt;p&gt;Cobrapy now has flux sampling supported by
&lt;code&gt;cobra.flux_analysis.sampling&lt;/code&gt; see
&lt;a href=&#34;http://cobrapy.readthedocs.io/en/latest/sampling.html&#34;&gt;the sampling notebook&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;loopless-models-and-solutions&#34;&gt;Loopless models and solutions&lt;/h2&gt;

&lt;p&gt;Added implementations of
&lt;a href=&#34;http://dx.doi.org/10.1093/bioinformatics/btv096&#34;&gt;CycleFreeFlux&lt;/a&gt; and
the loopless model of
&lt;a href=&#34;http://dx.doi.org/10.1016/j.bpj.2010.12.3707&#34;&gt;Schellenberger et al.&lt;/a&gt;. See
the
&lt;a href=&#34;http://cobrapy.readthedocs.io/en/latest/loopless.html&#34;&gt;notebook on loopless&lt;/a&gt;
and &lt;a href=&#34;http://cobrapy.readthedocs.io/en/latest/simulating.html&#34;&gt;simulating&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;dataframes-as-return-values&#34;&gt;DataFrames as return values&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;flux_variability_analysis&lt;/code&gt;, &lt;code&gt;single_{gene,reaction}_deletion&lt;/code&gt;,
&lt;code&gt;cobra.flux_analysis.sampling&lt;/code&gt; and
&lt;code&gt;cobra.util.create_stoichiometric_matrix&lt;/code&gt; now return pandas data frames
instead of nested dicts as these are more convenient and fun to work
with. Pandas (and numpy) are therefore now hard requirements for
cobrapy, which should not be a problem for neither linux, windows or
mac users as there are reliable wheels for these packages now.&lt;/p&gt;

&lt;h3 id=&#34;model-medium&#34;&gt;Model medium&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;model.medium&lt;/code&gt; is now a dict and setter for getting boundary feeding
reactions and their bounds&lt;/p&gt;

&lt;h2 id=&#34;fixes&#34;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Handle multiple IDs in Matlab models
&lt;a href=&#34;https://github.com/opencobra/cobrapy/issues&#34;&gt;#345&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DictList.query&lt;/code&gt; behavior changed so that attribute is &lt;code&gt;None&lt;/code&gt; if the
search parameter is not a regex or string, to enable
&lt;code&gt;reactions.query(lambda x: x.boundary)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set charge from notes if not defined elsewhere
&lt;a href=&#34;https://github.com/opencobra/cobrapy/issues&#34;&gt;#352&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Warnings are no longer issued on package import if soft requirement
scipy, python-libsbml is not available.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deprecated-features&#34;&gt;Deprecated features&lt;/h2&gt;

&lt;p&gt;These features are now deprecated and slated for complete removal in
the next major cobrapy release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The whole &lt;code&gt;cobra.solver&lt;/code&gt; module is now deprecated, see New features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayBasedModel&lt;/code&gt; / &lt;code&gt;Model.to_array_based_model&lt;/code&gt; are
deprecated. This formulation makes little sense when handing over
the matrix algebra to optlang, for the stoichiometry matrix (aka S),
see &lt;code&gt;cobra.util.array.create_stoichiometric_matrix&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metabolite.y&lt;/code&gt; in favor of &lt;code&gt;Metabolite.shadow_price&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model.add_reaction&lt;/code&gt; in favor of &lt;code&gt;Model.add_reactions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reaction.x&lt;/code&gt; in favor of &lt;code&gt;Reaction.flux&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reaction.y&lt;/code&gt; in favor of &lt;code&gt;Reaction.reduced_cost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Solution.{x, y, x_dict, y_dict, f}&lt;/code&gt; in favor of &lt;code&gt;Solution.{fluxes,
reduced_costs}&lt;/code&gt;. The setters are also deprecated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phenotype_phase_plane&lt;/code&gt; in favor of &lt;code&gt;production_envelope&lt;/code&gt;. The
plotting capabilities are deprecated, to be re-implemented somewhere
else.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;convert_to_irreverible&lt;/code&gt;, &lt;code&gt;revert_to_irreversible&lt;/code&gt;, &lt;code&gt;canonical_form&lt;/code&gt;
deprecated without replacement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_reaction_bounds&lt;/code&gt; deprecated without replacement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backwards-incompatible-changes&#34;&gt;Backwards incompatible changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;optknock was completely removed, users are advised to use cameo for
this functionality&lt;/li&gt;
&lt;li&gt;dual_problem was removed&lt;/li&gt;
&lt;li&gt;gapfilling algorithms were removed without replacement, to be
re-introduced in a different package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cobra.topology&lt;/code&gt; was removed, possibly to be reintroduced in a
different package&lt;/li&gt;
&lt;li&gt;flux_variability_analysis results must be transformed to have them
work as the previous nested dict,
i.e. &lt;code&gt;flux_variability_analysis(model).T&lt;/code&gt; should give behavior as
previously.&lt;/li&gt;
&lt;li&gt;In a major linting effort we renamed capitalized modules to lower-case,
e.g. &lt;code&gt;cobra.core.Model&lt;/code&gt; to &lt;code&gt;cobra.core.model&lt;/code&gt;. Imports from &lt;code&gt;cobra&lt;/code&gt;
are unchanged though.&lt;/li&gt;
&lt;li&gt;objective coefficients of reactions can now only be set once the
reaction is attached to a model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reaction.{x,y}&lt;/code&gt;, &lt;code&gt;Metabolite.y&lt;/code&gt; are defunct for legacy solvers.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Efficient estimation of the maximum metabolic productivity of batch systems.</title>
      <link>https://opencobra.github.io/cobrapy/pubs/PM28163785/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/pubs/PM28163785/</guid>
      <description>&lt;p&gt;Production of chemicals from engineered organisms in a batch culture involves an inherent trade-off between productivity, yield, and titer. Existing strategies for strain design typically focus on designing mutations that achieve the highest yield possible while maintaining growth viability. While these methods are computationally tractable, an optimum productivity could be achieved by a dynamic strategy in which the intracellular division of resources is permitted to change with time. New methods for the design and implementation of dynamic microbial processes, both computational and experimental, have therefore been explored to maximize productivity. However, solving for the optimal metabolic behavior under the assumption that all fluxes in the cell are free to vary is a challenging numerical task. Previous studies have therefore typically focused on simpler strategies that are more feasible to implement in practice, such as the time-dependent control of a single flux or control variable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>0.5</title>
      <link>https://opencobra.github.io/cobrapy/releases/0.5/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/releases/0.5/</guid>
      <description>&lt;p&gt;This is the current stable release for COBRApy. The final release is &lt;strong&gt;0.5.11&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For a list of features please see the
&lt;a href=&#34;https://cobrapy.readthedocs.org/en/stable/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meneco, a Topology-Based Gap-Filling Tool Applicable to Degraded Genome-Wide Metabolic Networks.</title>
      <link>https://opencobra.github.io/cobrapy/pubs/PM28129330/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/pubs/PM28129330/</guid>
      <description>&lt;p&gt;Increasing amounts of sequence data are becoming available for a wide range of non-model organisms. Investigating and modelling the metabolic behaviour of those organisms is highly relevant to understand their biology and ecology. As sequences are often incomplete and poorly annotated, draft networks of their metabolism largely suffer from incompleteness. Appropriate gap-filling methods to identify and add missing reactions are therefore required to address this issue. However, current tools rely on phenotypic or taxonomic information, or are very sensitive to the stoichiometric balance of metabolic reactions, especially concerning the co-factors. This type of information is often not available or at least prone to errors for newly-explored organisms. Here we introduce Meneco, a tool dedicated to the topological gap-filling of genome-scale draft metabolic networks. Meneco reformulates gap-filling as a qualitative combinatorial optimization problem, omitting constraints raised by the stoichiometry of a metabolic network considered in other methods, and solves this problem using Answer Set Programming. Run on several artificial test sets gathering 10,800 degraded Escherichia coli networks Meneco was able to efficiently identify essential reactions missing in networks at high degradation rates, outperforming the stoichiometry-based tools in scalability. To demonstrate the utility of Meneco we applied it to two case studies. Its application to recent metabolic networks reconstructed for the brown algal model Ectocarpus siliculosus and an associated bacterium Candidatus Phaeomarinobacter ectocarpi revealed several candidate metabolic pathways for algal-bacterial interactions. Then Meneco was used to reconstruct, from transcriptomic and metabolomic data, the first metabolic network for the microalga Euglena mutabilis. These two case studies show that Meneco is a versatile tool to complete draft genome-scale metabolic networks produced from heterogeneous data, and to suggest relevant reactions that explain the metabolic capacity of a biological system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reliable and efficient solution of genome-scale models of Metabolism and macromolecular Expression.</title>
      <link>https://opencobra.github.io/cobrapy/pubs/PM28098205/</link>
      <pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/pubs/PM28098205/</guid>
      <description>&lt;p&gt;Constraint-Based Reconstruction and Analysis (COBRA) is currently the only methodology that permits integrated modeling of Metabolism and macromolecular Expression (ME) at genome-scale. Linear optimization computes steady-state flux solutions to ME models, but flux values are spread over many orders of magnitude. Data values also have greatly varying magnitudes. Standard double-precision solvers may return inaccurate solutions or report that no solution exists. Exact simplex solvers based on rational arithmetic require a near-optimal warm start to be practical on large problems (current ME models have 70,000 constraints and variables and will grow larger). We have developed a quadruple-precision version of our linear and nonlinear optimizer MINOS, and a solution procedure (DQQ) involving Double and Quad MINOS that achieves reliability and efficiency for ME models and other challenging problems tested here. DQQ will enable extensive use of large linear and nonlinear models in systems biology and other applications involving multiscale data.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>